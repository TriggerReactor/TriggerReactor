plugins {
    id 'java'
    id 'groovy'
    id "com.dorongold.task-tree" version "2.1.0"
}

repositories {
    mavenCentral()
}

def javaVersionFromCli = providers.gradleProperty("java_version")
        .map { JavaVersion.toVersion(it) }
        .getOrElse(JavaVersion.VERSION_17)

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'

    ext {
        id = 'TriggerReactor'
        description = 'Simple script parser with infinite possibility'
        author = 'wysohn'
        authors = [
                'soliddanii',
                'MidnightSugar',
                'TheBestNightSky',
                'dltks0306',
                'RubrumExPlaneta',
                'Alex4386',
                'RedLime',
                'mrandriyg',
                'Dr_Romantic',
                'gerzytet',
                'Kuiprux',
                'Ioloolo',
                'Sayakie',
                'soshimee'
        ]
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
                include '**/*.js'
                include '**/*.yml'
            }
        }

        test {
            java {
                srcDirs = ['src/test/java/']
            }
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        // https://mvnrepository.com/artifact/mysql/mysql-connector-java
        api group: 'mysql', name: 'mysql-connector-java', version: '8.0.33'
        // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
        api group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

        // https://mvnrepository.com/artifact/org.graalvm.js/js
        //implementation group: 'org.graalvm.js', name: 'js', version: '21.1.0'
        // https://mvnrepository.com/artifact/org.graalvm.js/js-scriptengine
        //implementation group: 'org.graalvm.js', name: 'js-scriptengine', version: '21.1.0'

        testImplementation 'junit:junit:4.11'
        testImplementation 'org.mockito:mockito-core:3.12.4'
//        testImplementation 'org.powermock:powermock-core:2.+'
//        testImplementation 'org.powermock:powermock-module-junit4:2.+'
//        testImplementation 'org.powermock:powermock-api-mockito2:2.+'
        testImplementation 'org.javassist:javassist:3.20.0-GA'
        if (javaVersionFromCli.java11Compatible) {
            logger.quiet "Native Nashorn is not available on Java 11+. Using Nashorn from Maven Central."
            testImplementation("org.openjdk.nashorn:nashorn-core:15.4")
        }
    }

    java {
        sourceCompatibility = targetCompatibility = javaVersionFromCli
    }

    archivesBaseName = parent.archivesBaseName + "-" + archivesBaseName

    // TASKS

    test {
        testLogging {
            events "failed"
            exceptionFormat "full"
            showStandardStreams = true
        }

        if (javaVersionFromCli.java11Compatible) {
            jvmArgs = [
                    '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED'
            ]
        }

        if (javaVersionFromCli <= JavaVersion.VERSION_1_8) {
            // Don't include nashorn whatsoever for version 1.8 (Java 8) and below
            exclude '**/nashorn/**'
        }
    }

    task copyResources(type: Copy) {
        from project(":core").sourceSets.main.output.resourcesDir
        into "${buildDir}/resources/main"
    }
    compileTestJava.dependsOn copyResources
    jar.dependsOn copyResources

    task copyJars(type: Copy) {
        from project.file('build/libs')
        include '*.jar'
        into rootProject.file('build/libs')
    }

    build.finalizedBy(copyJars)

    javadoc {
        failOnError false
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')

        exclude "**/copy/com/google/**"
        exclude "org/apache/**"
    }
}

allprojects {
    test {
        beforeTest {
            logger.quiet "Executing test ${it.name} [${it.className}]"
        }
        afterTest { desc, result ->
            logger.quiet "Done test ${desc.name} [${desc.className}] with result: ${result.resultType}"
        }
    }
}

def exportedProjects= [
        ":core",
        /*":sponge",*/
        ":bukkit",
        ":bukkit:legacy",
        ":bukkit:latest"
]

javadoc {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')

    source exportedProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    options {
        links "https://docs.oracle.com/javase/8/docs/api/"
        links "https://hub.spigotmc.org/javadocs/bukkit/"
        links "https://jd.spongepowered.org/7.0.0/"
    }
    destinationDir = file("${buildDir}/docs/javadoc")
    exclude "**/copy/com/google/**"
    exclude "org/apache/**"
}